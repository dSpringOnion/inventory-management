generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "postgresql", "mysql", "mongodb", etc.
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(cuid())
  name       String
  email      String    @unique
  password   String
  permission LevelEnum @default(MANAGER)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  stores   Store[]
  invoices Invoice[]
}

enum LevelEnum {
  MANAGER
  AREA_MANAGER
  ADMIN
}

model Store {
  id            String            @id @default(cuid())
  name          String
  address       String
  contactMethod ContactMethodEnum
  userId        String // Added foreign key field
  user          User              @relation(fields: [userId], references: [id])
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  items    Item[]
  invoices Invoice[]
}

enum ContactMethodEnum {
  PHONE
  EMAIL
  WECHAT
}

model Item {
  itemId      String   @id @default(cuid())
  nameEn      String
  nameZh      String
  price       Decimal
  description String
  onHand      Int
  minStock    Int
  vendorId    String // Added foreign key field
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceItems InvoiceItem[]
  Store        Store?        @relation(fields: [storeId], references: [id])
  storeId      String?
}

model Vendor {
  id            String            @id @default(cuid())
  name          String
  address       String
  contactMethod ContactMethodEnum
  items         Item[]
  invoices      Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Invoice {
  invoiceId String   @id @default(cuid())
  date      DateTime
  totalCost Decimal
  vendorId  String // Added foreign key field
  userId    String // Added foreign key field
  storeId   String // Added foreign key field
  vendor    Vendor   @relation(fields: [vendorId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  store     Store    @relation(fields: [storeId], references: [id])

  invoiceItems InvoiceItem[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model InvoiceItem {
  id        String   @id @default(cuid())
  invoiceID String // Added foreign key field
  itemId    String // Added foreign key field
  invoice   Invoice  @relation(fields: [invoiceID], references: [invoiceId])
  item      Item     @relation(fields: [itemId], references: [itemId])
  quantity  Int
  unitCost  Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
