// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LocationType {
  STORE
  RESTAURANT
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  userRoles     UserRole[]
  userAreas     UserArea[]
  userLocations UserLocation[]
  orders        Order[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  // Relations
  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model UserRole {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Role   @relation(fields: [roleId], references: [id])
  roleId Int

  @@unique([userId, roleId])
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  // Relations
  rolePermissions RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int

  @@unique([roleId, permissionId])
}

model Area {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  locations Location[]
  userAreas UserArea[]
}

model UserArea {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  area   Area   @relation(fields: [areaId], references: [id])
  areaId String

  @@unique([userId, areaId])
}

model Location {
  id        String       @id @default(cuid())
  name      String
  address   String
  type      LocationType
  areaId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  area          Area           @relation(fields: [areaId], references: [id])
  userLocations UserLocation[]
  locationItems LocationItem[]
  orders        Order[]
}

model UserLocation {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String

  @@unique([userId, locationId])
}

model Vendor {
  id            String            @id @default(cuid())
  name          String
  address       String
  contactMethod ContactMethodEnum
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  items Item[]
}

enum ContactMethodEnum {
  PHONE
  EMAIL
  WECHAT
}

model Item {
  itemId      String   @id @default(cuid())
  nameEn      String
  nameZh      String
  price       Decimal
  description String
  vendorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  vendor        Vendor         @relation(fields: [vendorId], references: [id])
  locationItems LocationItem[]
  orderItems    OrderItem[]
}

model LocationItem {
  locationId String
  itemId     String
  quantity   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  location Location @relation(fields: [locationId], references: [id])
  item     Item     @relation(fields: [itemId], references: [itemId])

  @@id([locationId, itemId])
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  locationId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  location   Location    @relation(fields: [locationId], references: [id])
  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   String
  itemId    String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order Order @relation(fields: [orderId], references: [id])
  item  Item  @relation(fields: [itemId], references: [itemId])
}
